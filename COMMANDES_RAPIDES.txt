# ===============================================================================
#                           üöÄ LUNACORE - COMMANDES RAPIDES
# ===============================================================================

# üîß CONFIGURATION INITIALE
# ===============================================================================

# Activer l'environnement virtuel (TOUJOURS FAIRE EN PREMIER)
.venv\Scripts\Activate

# V√©rifier que tout fonctionne
python -c "from lunacore.crew_system import LunaCrewSystem; print('‚úÖ LunaCore OK')"

# ===============================================================================
# üöÄ LANCEMENT DE LUNACORE
# ===============================================================================

# M√©thode recommand√©e (utilise le Python de l'environnement virtuel)
.venv\Scripts\python.exe -m streamlit run app_crew.py

# Avec port personnalis√© si le port 8501 est occup√©
.venv\Scripts\python.exe -m streamlit run app_crew.py --server.port 8502

# ===============================================================================
# üì¶ GESTION DES D√âPENDANCES
# ===============================================================================

# Installer toutes les d√©pendances
pip install -r requirements.txt

# Mettre √† jour toutes les d√©pendances
pip install --upgrade -r requirements.txt

# Sauvegarder les nouvelles d√©pendances
pip freeze > requirements.txt

# V√©rifier les packages install√©s
pip list

# V√©rifier une d√©pendance sp√©cifique
pip show crewai

# ===============================================================================
# üîç TESTS ET DIAGNOSTIC
# ===============================================================================

# Tester l'import de LunaCore
python -c "from lunacore.crew_system import LunaCrewSystem; print('‚úÖ Import OK')"

# V√©rifier CrewAI
python -c "import crewai; print('‚úÖ CrewAI version:', crewai.__version__)"

# V√©rifier Streamlit
python -c "import streamlit; print('‚úÖ Streamlit version:', streamlit.__version__)"

# V√©rifier Ollama (mod√®les install√©s)
ollama list

# Tester la cr√©ation d'un crew
python -c "from lunacore.crew_system import LunaCrewSystem; crew = LunaCrewSystem(); print('‚úÖ Crew cr√©√© avec succ√®s')"

# ===============================================================================
# üîÑ GIT ET VERSIONING
# ===============================================================================

# Workflow de base
git add .
git commit -m "feat: Description des changements"
git push origin main

# V√©rifier le statut
git status

# Voir l'historique
git log --oneline -10

# Cr√©er une nouvelle branche
git checkout -b feature/nouvelle-fonctionnalite

# Pousser une nouvelle branche
git push -u origin feature/nouvelle-fonctionnalite

# Revenir sur main
git checkout main

# Fusionner une branche
git merge feature/nouvelle-fonctionnalite

# ===============================================================================
# üßπ NETTOYAGE ET MAINTENANCE
# ===============================================================================

# Nettoyer les caches Python
python -Bc "import pathlib; [p.unlink() for p in pathlib.Path('.').rglob('*.py[co]')]"

# Supprimer les dossiers __pycache__
Get-ChildItem -Path . -Recurse -Name "__pycache__" | Remove-Item -Recurse -Force

# Nettoyer les fichiers temporaires
Remove-Item -Path "*.tmp", "*.log" -Force -ErrorAction SilentlyContinue

# ===============================================================================
# üîß GESTION DES ENVIRONNEMENTS VIRTUELS
# ===============================================================================

# Cr√©er un nouvel environnement virtuel
python -m venv .venv

# Activer l'environnement (Windows)
.venv\Scripts\Activate

# Activer l'environnement (Linux/Mac)
source .venv/bin/activate

# D√©sactiver l'environnement
deactivate

# Supprimer l'environnement virtuel (si besoin de recommencer)
Remove-Item -Path ".venv" -Recurse -Force

# ===============================================================================
# üåê NAVIGATION ET FICHIERS
# ===============================================================================

# Ouvrir le dossier de sortie des projets g√©n√©r√©s
explorer sandbox\crew_output

# Lister les fichiers g√©n√©r√©s
Get-ChildItem sandbox\crew_output -Recurse

# Ouvrir l'interface web
start http://localhost:8501

# ===============================================================================
# üìä MONITORING ET LOGS
# ===============================================================================

# Suivre les logs Streamlit en temps r√©el
Get-Content streamlit.log -Wait -Tail 10

# V√©rifier l'utilisation des ports
netstat -an | findstr ":8501"

# Voir les processus Python actifs
Get-Process python

# ===============================================================================
# üõ†Ô∏è D√âPANNAGE AVANC√â
# ===============================================================================

# R√©installer CrewAI en cas de probl√®me
pip uninstall crewai -y
pip install crewai

# R√©installer toutes les d√©pendances
pip uninstall -r requirements.txt -y
pip install -r requirements.txt

# Forcer la r√©installation de Streamlit
pip install streamlit --force-reinstall

# V√©rifier la configuration Python
python -c "import sys; print('Python:', sys.version); print('Executable:', sys.executable)"

# ===============================================================================
# üìù EXEMPLES DE BRIEFS POUR TESTS RAPIDES
# ===============================================================================

# API Simple
"Cr√©e une API FastAPI avec 3 endpoints : GET users, POST user, DELETE user"

# Dashboard
"Dashboard Streamlit pour visualiser des donn√©es CSV avec graphiques"

# CLI Tool
"Outil en ligne de commande pour convertir des fichiers JSON en CSV"

# Bot Discord
"Bot Discord avec commande !help et !ping"

# ===============================================================================
# üéØ WORKFLOW COMPLET DE D√âVELOPPEMENT
# ===============================================================================

# 1. Activer l'environnement
.venv\Scripts\Activate

# 2. Mettre √† jour si n√©cessaire
git pull origin main

# 3. Installer/mettre √† jour les d√©pendances
pip install -r requirements.txt

# 4. Lancer LunaCore
.venv\Scripts\python.exe -m streamlit run app_crew.py

# 5. Apr√®s d√©veloppement, sauvegarder
git add .
git commit -m "feat: Description du travail effectu√©"
git push origin main

# ===============================================================================
# üìû LIENS UTILES
# ===============================================================================

# Interface LunaCore : http://localhost:8501
# Documentation CrewAI : https://docs.crewai.com/
# Documentation Streamlit : https://docs.streamlit.io/
# Ollama : https://ollama.ai/docs
